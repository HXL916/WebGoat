name: Publish Docker Image and Deploy to Azure

on:
    push:
        branches:
            - develop

jobs:
    push_to_docker_registry:
        if: true == false
        runs-on: ubuntu-latest
        permissions:
            packages: write
            contents: read
            attestations: write
            id-token: write

        steps:
            - name: Check out the repo
              uses: actions/checkout@v4

            - name: Add permissions to Maven Wrapper
              run: chmod +x ./mvnw

            - name: Set up Java
              uses: actions/setup-java@v4
              with:
                  distribution: "temurin"
                  java-version: "21"

            - name: Compile the project
              run: |
                  mvn spotless:apply &&
                      ./mvnw clean install

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ secrets.DOCKER_USERNAME }}/log8100_tp3:latest

            - name: Generate Trivy vulnerability report
              uses: aquasecurity/trivy-action@master
              with:
                  scan-type: "image"
                  image-ref: ${{ secrets.DOCKER_USERNAME }}/log8100_tp3:latest
                  format: json
                  output: trivy-report.json
                  exit-code: 0
                  timeout: "7m0s"

            - name: Upload vulnerability scan results
              uses: actions/upload-artifact@v4
              with:
                  name: trivy-report
                  path: trivy-report.json
                  retention-days: 30

    deploy_aks_with_terraform:
        # needs:
        #     - push_to_docker_registry
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Log in to Azure
              uses: azure/login@v2
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Delete existing resource group if it exists
              uses: azure/cli@v2
              with:
                  azcliversion: latest
                  inlineScript: |
                      EXISTING_RG=$(az group show --name rg-webgoat --query "[].name" -o tsv)
                      echo "$EXISTING_RG"
                      if [ "$EXISTING_RG" == "rg-webgoat" ]; then
                          echo "Found resource group: $EXISTING_RG"
                          echo "Deleting resource group: $EXISTING_ARG"
                          az group delete --name "rg-webgoat" --yes
                          echo "Resource group deleted."
                      else
                          echo "rg-webgoat does not exist."
                      fi

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_wrapper: false

            - name: Initialize Terraform
              env:
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
              run: terraform init -input=false

            - name: Validate Terraform
              run: terraform validate

            - name: Plan Terraform
              env:
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
              run: terraform plan -out=tfplan -input=false

            - name: Apply Terraform
              env:
                  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
              run: terraform apply -input=false tfplan

    deploy_docker_with_ansible:
        needs:
            - deploy_aks_with_terraform
            # - push_to_docker_registry
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Ansible
              run: |
                  sudo apt-get update && sudo apt-get install -y ansible &&
                      ansible-galaxy collection install azure.azcollection kubernetes.core --force &&
                      pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt &&
                      pip3 install -r ~/.ansible/collections/ansible_collections/kubernetes/core/requirements.txt

            - name: Run Docker deployment Playbook
              env:
                  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
                  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
              run: ansible-playbook azure_configure_aks.yml -e 'ansible_python_interpreter=/usr/bin/python3'
