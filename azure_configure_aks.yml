- name: Deploy Docker container to AKS
  hosts: localhost
  gather_facts: false

  vars:
    kubeconfig_path: "./kubeconfig"
    docker_image: "dimario1/log8100_tp3:latest"
    deployment_name: "webgoat"
    service_name: "webgoat-service"

  tasks:
    - name: Login to Azure using service principal
      shell: |
        az login --service-principal \
          --username "{{ lookup('env', 'AZURE_CLIENT_ID') }}" \
          --password "{{ lookup('env', 'AZURE_CLIENT_SECRET') }}" \
          --tenant "{{ lookup('env', 'AZURE_TENANT_ID') }}"
      register: azure_login
      changed_when: false

    - name: Set Azure subscription
      shell: |
        az account set --subscription "{{ lookup('env', 'AZURE_SUBSCRIPTION_ID') }}"
      register: azure_subscription
      changed_when: false 

    - name: Retrieve kubeconfig for AKS
      command: >
        az aks get-credentials
        --resource-group rg-webgoat
        --name webGoatCluster
        --file "{{ kubeconfig_path }}"
      args:
        creates: "{{ kubeconfig_path }}"

    - name: Create namespace
      kubernetes.core.k8s:
        api_version: v1
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Namespace
        name: webgoat

    - name: Create Kubernetes deployment
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: webgoat
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: "{{ deployment_name }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: "{{ deployment_name }}"
            template:
              metadata:
                labels:
                  app: "{{ deployment_name }}"
              spec:
                containers:
                - name: webgoat-container
                  image: "{{ docker_image }}"
                  ports:
                  - containerPort: 8080

    - name: Expose deployment with a LoadBalancer service
      kubernetes.core.k8s:
        kubeconfig: "{{ kubeconfig_path }}"
        namespace: webgoat
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ service_name }}"
          spec:
            type: LoadBalancer
            selector:
              app: "{{ deployment_name }}"
            ports:
            - protocol: TCP
              port: 80
              targetPort: 8080

    - name: Wait for LoadBalancer to become available
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Service
        namespace: webgoat
        name: "{{ service_name }}"
      register: service_info
      until: service_info.resources[0].status.loadBalancer.ingress[0].ip is defined
      retries: 5
      delay: 15

    - name: Print the external IP
      debug:
        msg: "Webgoat is accessible at http://{{ service_info.resources[0].status.loadBalancer.ingress[0].ip }}/WebGoat"

    - name: Add Prometheus Helm repository
      command: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    - name: Add Grafana Helm repository
      command: helm repo add grafana https://grafana.github.io/helm-charts

    - name: Update Helm repositories
      command: helm repo update

    - name: Install Prometheus in the webgoat namespace
      command: >
        helm upgrade --install prometheus prometheus-community/prometheus
        --namespace webgoat
        --create-namespace
        --wait
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Retrieve Prometheus service URL
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        kind: Service
        namespace: webgoat
        name: prometheus-server
      register: prometheus_service_info

    - name: Set Prometheus URL
      set_fact:
        prometheus_url: >-
          {% if prometheus_service_info.resources[0].spec.type == 'LoadBalancer' %}
            http://{{ prometheus_service_info.resources[0].status.loadBalancer.ingress[0].ip }}:{{ prometheus_service_info.resources[0].spec.ports[0].port }}
          {% elif prometheus_service_info.resources[0].spec.type == 'NodePort' %}
            http://<Node_IP>:{{ prometheus_service_info.resources[0].spec.ports[0].nodePort }}
          {% else %}
            http://{{ prometheus_service_info.resources[0].spec.clusterIP }}:{{ prometheus_service_info.resources[0].spec.ports[0].port }}
          {% endif %}

    - name: Debug Prometheus URL
      debug:
        msg: "Prometheus is accessible at {{ prometheus_url }}"

    - name: Deploy Grafana Kubernetes Monitoring Helm Chart
      kubernetes.core.helm:
        name: grafana-k8s-monitoring
        chart_ref: grafana/k8s-monitoring
        release_namespace: webgoat
        chart_version: 0.2.5
        values:
          cluster:
            name: webGoatCluster
          externalServices:
            prometheus:
              host: "{{ prometheus_url }}"
              basicAuth:
                username: admin
                password: admin
          opencost:
            opencost:
              exporter:
                defaultClusterId: webGoatCluster
              prometheus:
                external:
                  url: "{{ prometheus_url }}/api/prom"
          traces:
            enabled: true
          grafana-agent:
            agent:
              extraPorts:
                - name: otlp-traces
                  port: 4317
                  targetPort: 4317
                  protocol: TCP

    - name: Verify Prometheus deployment
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: webgoat
        label_selectors:
          - "app=prometheus"

    - name: Verify Grafana deployment
      kubernetes.core.k8s_info:
        kubeconfig: "{{ kubeconfig_path }}"
        api_version: v1
        kind: Pod
        namespace: webgoat
        label_selectors:
          - "app.kubernetes.io/name=grafana"